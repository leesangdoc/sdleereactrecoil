Dynamic Routes : 📁pages/📁movies/[id].js ➡️ http://localhost:3000/movies/123
Next.js의 Dynamic Routes를 이용해 상품 ID가 달라도 하나의 페이지로 관리할 수 있다.
next/link를 이용해 새로고침 없이 페이지 간 이동을 할 수 있다.
Link에는 prefetch라는 속성이 있다. default가 true. 이걸 쓰게 되면 첫 화면이나 스크롤을 했을 때, viewport 내부에 있는 링크들은 다 preload 된다. preload가 된다는 것은 정적 생성이 된다는 것.
Link는 단지 href만을 위한 것
나머지(style, className)는 모두 anchor 태그에 넣는다.
import Link from 'next/link';
import { useRouter } from 'next/router';

export default function NavBar() {
  const router = useRouter();

  return (
    <nav>
      <Link href="/">
        <a style={{ color: router.pathname === '/' ? 'red' : 'blue' }}>Home</a>
      </Link>
      <Link href="/about">
        <a style={{ color: router.pathname === '/about' ? 'red' : 'blue' }}>About</a>
      </Link>
    </nav>
  );
}

Next.js는 기본적으로 모든 페이지를 사전 렌더링(pre-rendering) 한다.
사전 렌더링은 더 좋은 퍼포먼스를 내고, 검색 엔진 최적화(SEO)에 좋다.
Pre-rendering에는 2가지 방법이 있다. : Static-site Generation(SSG), Server-side rendering(SSR)
2가지 방법의 차이점? 언제 HTML 파일을 생성하는가
프로젝트 빌드하는 시점에 HTML 파일 생성
모든 요청에 재사용
퍼포먼스 이유로 Next.js는 정적 생성을 권고
정적 생성된 페이지들은 CDN에 캐시됨
getStaticProps / getStaticPaths
개발 환경에서는 둘 다 요청할 때마다 호출된다. 그래서 개발 환경에서 테스트하기 더 편하다.
getStaticProps : [id] 같은 Dynamic Routes는 불가능. 어떤 id가 들어올지 모르기 때문에 모든 제품에 대해 html을 하나하나 생성해둘 수 없음.
getStaticPaths : 만약 개수가 한정적이고 id list를 미리 알 수 있으면, [id] 같은 Dynamic Routes도 가능.
return 할 때 fallback 값이 false이면, 없는 페이지 대응을 못한다. 없는 페이지는 그냥 404 페이지 뜬다.
return 할 때 fallback 값이 true라면?
getStaticPaths로 전달된 경로들이 build time에 만들어지는 것은 변함없음.
나머지는 최초 접속 시 props가 빈 상태(원하면 로딩 표시 가능)로 그려지고,
이후에 background에서 정적 파일로 html과 json을 생성해 준다.
그다음에 Next.js는 pre-rendering 목록에 추가한다.
두 번째 접속부터는 정적 생성된 페이지를 사용하기 때문에 새로고침 해도 굉장히 빠르게 보인다.
(주의) 페이지가 굉장히 많을 경우 위험함. build time 늘어남.
유저가 요청하기 전에 미리 페이지를 만들어놔도 상관없으면 정적 생성을 쓰면 된다.
마케팅 페이지, 블로그 게시물, 제품 리스트, 도움말, 문서에 적합
매 요청마다 HTML 파일 생성
CDN에 캐시되지 않기 때문에 조금 느릴 수 있음
항상 최신 상태 유지
getServerSideProps
관리자 페이지, 분석 차트에 적합
